{"version":3,"sources":["cryptomonedas.png","components/Error.js","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MensajeError","styled","p","Error","mensaje","Label","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5582a24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst MensajeError = styled.p`\n    background-color: #b7322c;\n    padding: 1rem;\n    color: #FFF;\n    font-size: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    text-align: center;\n    font-family: 'Bebas Neue', cursive;\n`;\n\nconst Error = ({mensaje}) => {\n    return (  \n        <MensajeError>{mensaje}</MensajeError>\n    );\n}\n \nexport default Error;","import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display:block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n`\n\nconst useMoneda = (label, stateInicial, opciones) => {\n\n    const [state, actualizarState] = useState(stateInicial);\n\n    const Seleccionar = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <Select\n                onChange={e => actualizarState(e.target.value)}\n                value={state}\n            >\n                <option value=\"\">- Seleccione -</option>\n                {opciones.map(opcion => (\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\n                ))}\n            </Select>\n        </Fragment>\n    );\n\n    return [state, Seleccionar, actualizarState];\n}\n\nexport default useMoneda;","import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display:block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n`\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n\n\n    const [state, actualizarState] = useState(stateInicial);\n\n    const SelectCripto = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <Select\n                onChange={e => actualizarState(e.target.value)}\n                value={state}\n            >\n                <option value=\"\">- Seleccione -</option>\n                {opciones.map(opcion => (\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\n                ))}\n            </Select>\n        </Fragment>\n    );\n\n    return [state, SelectCripto, actualizarState];\n}\n\nexport default useCriptomoneda;","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\n\nimport Error from './Error';\nimport useMoneda from '../hooks/useMoneda';\nimport useCriptomoneda from '../hooks/useCriptomoneda';\nimport axios from 'axios';\n\nconst Boton = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n    background-color: #66a2fe;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #326AC0;\n        cursor:pointer;\n    }\n`\n\nconst Formulario = ({ guardarMoneda, guardarCriptomoneda }) => {\n\n    const [listacripto, guardarCriptomonedas] = useState([]);\n    const [error, guardarError] = useState(false);\n\n    const MONEDAS = [\n        { codigo: 'USD', nombre: 'United States dollar' },\n        { codigo: 'MXN', nombre: 'Mexican Peso' },\n        { codigo: 'EUR', nombre: 'Euro' },\n        { codigo: 'GBP', nombre: 'Pound sterling' }\n    ];\n\n    const [moneda, SelectMonedas] = useMoneda('Choose your coin', '', MONEDAS);\n\n    const [criptomoneda, SelectCripto] = useCriptomoneda('Choose your Cryptocurrency', '', listacripto);\n\n    useEffect(() => {\n        const consultarAPI = async () => {\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n\n            const resultado = await axios.get(url);\n\n            guardarCriptomonedas(resultado.data.Data);\n        }\n        consultarAPI();\n    }, []);\n\n\n    const cotizarMoneda = e => {\n        e.preventDefault();\n\n        if (moneda === '' || criptomoneda === '') {\n            guardarError(true);\n            return;\n        }\n\n        guardarError(false);\n        guardarMoneda(moneda);\n        guardarCriptomoneda(criptomoneda);\n    }\n\n    return (\n        <form\n            onSubmit={cotizarMoneda}\n        >\n            {error ? <Error mensaje=\"All fields are required\" /> : null}\n\n            <SelectMonedas />\n\n            <SelectCripto />\n\n            <Boton\n                type=\"submit\"\n                value=\"Calculate\"\n            />\n        </form>\n    );\n}\n\nexport default Formulario;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ResultadoDiv = styled.div`\n    color: #FFF;\n    font-family: Arial, Helvetica, sans-serif;\n`;\n\nconst Info = styled.p`\n    font-size: 18px;\n    span {\n        font-weight:bold;\n    }\n`;\nconst Precio = styled.p`\n    font-size: 30px;\n\n    span {\n        font-weight:bold;\n    }\n`\n\nconst Cotizacion = ({ resultado }) => {\n    if (Object.keys(resultado).length === 0) return null;\n\n    console.log(resultado)\n\n    return (\n        <ResultadoDiv>\n            <Precio>Price: <span>{resultado.PRICE}</span> </Precio>\n            <Info>Today's highest price: <span>{resultado.HIGHDAY}</span> </Info>\n            <Info>Today's lowest price: <span>{resultado.LOWDAY}</span> </Info>\n            <Info>Variation in the last 24 hours: <span>{resultado.CHANGEPCT24HOUR}</span> </Info>\n            <Info>Last update: <span>{resultado.LASTUPDATE}</span> </Info>\n        </ResultadoDiv>\n    );\n}\n\nexport default Cotizacion;","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return ( \n        <div class=\"sk-chase\">\n            <div class=\"sk-chase-dot\"></div>\n            <div class=\"sk-chase-dot\"></div>\n            <div class=\"sk-chase-dot\"></div>\n            <div class=\"sk-chase-dot\"></div>\n            <div class=\"sk-chase-dot\"></div>\n            <div class=\"sk-chase-dot\"></div>\n        </div>\n     );\n}\n \nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\nimport imagen from './cryptomonedas.png';\nimport Formulario from './components/Formulario';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align:left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display:block;\n  }\n`;\n\nfunction App() {\n\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n\n    const cotizarCriptomoneda = async () => {\n      if (moneda === '') return;\n\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n\n      guardarCargando(true);\n\n      setTimeout(() => {\n\n        guardarCargando(false);\n\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000);\n\n\n    }\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  const componente = (cargando) ? <Spinner /> : <Cotizacion resultado={resultado} />\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen\n          src={imagen}\n          alt=\"imagen cripto\"\n        />\n      </div>\n      <div>\n        <Heading>Know Cryptocurrencies Price Instantly</Heading>\n\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n\n        {componente}\n\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}